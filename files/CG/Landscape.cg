void
LandscapeVertexMain(	float4 inPos : POSITION,
						float3 inNormal : NORMAL,
						float4 inTexCoord0 : TEXCOORD0,
						float4 inColour : COLOR,
			            
						out float4 outPos : POSITION,
						out float4 outTexCoord0 : TEXCOORD0,
						out float3 outEyeVector : TEXCOORD1,	// Eye-space direction from vertex to eye
						out float3 outNormal : TEXCOORD2,		// Eye-space per-vertex normals
						out float3 outLightVector : TEXCOORD3,	// Eye-space direction from vertex to light
						out float4 outColour : COLOR,
						out float4 outShadowPos : TEXCOORD4,	// The position of the vertex transformed into shadow map space

						uniform float4x4 model,
						uniform float4x4 view,
						uniform float4x4 projection,
						uniform float3 globalLightDir,
						uniform float4x4 texTransform,
						uniform float4x4 shadowMatrix )
{
	float4x4 modelView, modelViewProjection;
	modelView = mul( model, view );
	modelViewProjection = mul( modelView, projection );
	float4 eyePos = mul( inPos, modelView );
	outPos = mul( inPos, modelViewProjection );
	outNormal = mul( float4(inNormal,0), modelView ).xyz;
	outLightVector = -globalLightDir;
	outEyeVector = -eyePos.xyz;
	outTexCoord0 = mul( inTexCoord0, texTransform );
	outColour = inColour;
	outShadowPos = mul( inPos, shadowMatrix );
}

// If we're in shadow, return zero, otherwise return 1
float GetShadowScale( sampler2D shadowMap, float4 pos, float4 posWithDivide, float2 offset )
{
	float textureDepth;

	// If the texture coords are outside the texture, we're not in shadow
	if ( posWithDivide.x < 0.0f || posWithDivide.x > 1.0f ||
		 posWithDivide.y < 0.0f || posWithDivide.y > 1.0f )
	{
		return 1;
	}

	// Each platform interprets the depth data slightly differently
#if X_PS3
	/// Taken from Sony site "https://ps3.scedev.net/forums/thread/8376"
	float3 depthColor = tex2D(shadowMap, posWithDivide.xy + offset).arg;
	float3 depthFactor = float3(65536.0/16777215.0, 256.0/16777215.0, 1.0/16777215.0);
	textureDepth = dot(round(depthColor * 255.0), depthFactor);
#elif X_XENON
	textureDepth = tex2D( shadowMap, posWithDivide.xy + offset ).x;
	textureDepth = (textureDepth / 2.0f) + 0.5f;
#else
	textureDepth = tex2D( shadowMap, posWithDivide.xy + offset ).x;
#endif 
	
	if ( pos.w > 0.0f &&  textureDepth < posWithDivide.z )
		return 0;

	return 1;
}

float GetInShadow( sampler2D depthTexture, float4 vPos, float2 vOffset, float2 vTexelSize )
{
#if X_XENON
	vPos.z = (vPos.z - 0.5) * 2;
	return tex2D( depthTexture, (vPos.xy + vOffset * vTexelSize) / vPos.w ).x > vPos.z ? 1 : 0;
#else
	return tex2Dproj( depthTexture, float4( vPos.xy + vOffset * vTexelSize * vPos.w, vPos.zw ) ).x;
#endif
}

void
LandscapeFragmentMain(	float4 inTexCoord0 : TEXCOORD0,
						float3 inPos : TEXCOORD1,
						float3 inNormal : TEXCOORD2,
						float3 inLightVector : TEXCOORD3,
						float4 inVertexColour : COLOR,
						float4 inShadowPos : TEXCOORD4,

						uniform sampler2D texture0,
						uniform sampler2D shadowMap,
						uniform float3 shadowSize,
						uniform float3 globalDiffuse,
						uniform float3 globalAmbient,
						uniform float3 globalSpecular,
						uniform float3 globalFresnel,

						out float4 outCol : COLOR0 )
{
	// These values are hard-coded and shared across all landscapes, so there's
	// no need to slow everything down by passing them in
	const float3 materialFresnelCol = float3( 0.2f, 0.275f, 0.175f );
	const float3 materialSpecularCol = float3( 0.6f, 0.6f, 0.6f );
	const float materialFresnelPower = 1.5f;
	const float specularPower = 20.0f;

	// Test for being in shadow before doing the lighting calculations
	float4 shadowPosWithDivide = inShadowPos / inShadowPos.w;
	float fShadowScale = 0;

	// If the current pixel is outside the shadow map, then it's not in shadow
	if ( shadowPosWithDivide.x < 0 || shadowPosWithDivide.x > 1 ||
		 shadowPosWithDivide.y < 0 || shadowPosWithDivide.y > 1 )
	{
		fShadowScale = 1;
	}else{

#if X_PS3
//		shadowPosWithDivide.y = 1 - shadowPosWithDivide.y;
		inShadowPos.y = 1 - inShadowPos.y;
#endif

#define SHADOW_METHOD 2

#if SHADOW_METHOD==1
		// Bilinearly filter between the four closest pixels - first find the 'rounded down' coordinates
		// of the pixel we're actually rendering
		float2 vShadowTexelCoord = shadowSize.xy * shadowPosWithDivide.xy;
		float2 vPixelPosition = floor( vShadowTexelCoord );
		float2 vPixelBlend = frac( vShadowTexelCoord );
		float4 vZPositions;
		vZPositions.x = tex2D( shadowMap, (vPixelPosition + float2(0,0))/ shadowSize.xy ).x > inShadowPos.z ? 1 : 0;
		vZPositions.y = tex2D( shadowMap, (vPixelPosition + float2(0,1)) / shadowSize.xy ).x > inShadowPos.z ? 1 : 0;
		vZPositions.z = tex2D( shadowMap, (vPixelPosition + float2(1,0)) / shadowSize.xy ).x > inShadowPos.z ? 1 : 0;
		vZPositions.w = tex2D( shadowMap, (vPixelPosition + float2(1,1)) / shadowSize.xy ).x > inShadowPos.z ? 1 : 0;
		vZPositions.xy = lerp( vZPositions.xy, vZPositions.zw, vPixelBlend.x );
		fShadowScale = lerp( vZPositions.x, vZPositions.y, vPixelBlend.y );
#endif
#if SHADOW_METHOD==2
		float2 vPixelSize = float2( 1, 1 ) / shadowSize.xy;
		fShadowScale += GetInShadow( shadowMap, inShadowPos, float2(0,0), vPixelSize );
		fShadowScale += GetInShadow( shadowMap, inShadowPos, float2(-1,0), vPixelSize );
		fShadowScale += GetInShadow( shadowMap, inShadowPos, float2(1,0), vPixelSize );
		fShadowScale += GetInShadow( shadowMap, inShadowPos, float2(0,-1), vPixelSize );
		fShadowScale += GetInShadow( shadowMap, inShadowPos, float2(0,1), vPixelSize );
#if X_XBOX
		fShadowScale /= 5;
#else
		fShadowScale += GetInShadow( shadowMap, inShadowPos, float2(-1,-1), vPixelSize );
		fShadowScale += GetInShadow( shadowMap, inShadowPos, float2(1,-1), vPixelSize );
		fShadowScale += GetInShadow( shadowMap, inShadowPos, float2(-1,1), vPixelSize );
		fShadowScale += GetInShadow( shadowMap, inShadowPos, float2(1,1), vPixelSize );
		fShadowScale /= 9;
#endif
#endif
#if SHADOW_METHOD==3
		// 3x3 Gaussian blur of visibilities
		float2 vPixelSize = float2( 0.5, 0.5 ) / shadowSize.xy;
		fShadowScale += 0.075 * GetShadowScale( shadowMap, inShadowPos, shadowPosWithDivide, float2( -vPixelSize.x,	-vPixelSize.y ) );
		fShadowScale += 0.124 * GetShadowScale( shadowMap, inShadowPos, shadowPosWithDivide, float2( 0,				-vPixelSize.y ) );
		fShadowScale += 0.075 * GetShadowScale( shadowMap, inShadowPos, shadowPosWithDivide, float2( vPixelSize.x,		-vPixelSize.y ) );
		fShadowScale += 0.124 * GetShadowScale( shadowMap, inShadowPos, shadowPosWithDivide, float2( -vPixelSize.x,	0 ) );
		fShadowScale += 0.204 * GetShadowScale( shadowMap, inShadowPos, shadowPosWithDivide, float2( 0,				0 ) );
		fShadowScale += 0.124 * GetShadowScale( shadowMap, inShadowPos, shadowPosWithDivide, float2( vPixelSize.x,		0 ) );
		fShadowScale += 0.075 * GetShadowScale( shadowMap, inShadowPos, shadowPosWithDivide, float2( -vPixelSize.x,	vPixelSize.y ) );
		fShadowScale += 0.124 * GetShadowScale( shadowMap, inShadowPos, shadowPosWithDivide, float2( 0,				vPixelSize.y ) );
		fShadowScale += 0.075 * GetShadowScale( shadowMap, inShadowPos, shadowPosWithDivide, float2( vPixelSize.x,		vPixelSize.y ) );
#endif
	}

	float diffuse = 0.0f;
	float specular = 0.0f;
	float3 n = normalize( inNormal );
	float3 v = normalize( inPos );

	if ( fShadowScale > 0.01f ){
		// We're not in shadow - do the full lighting calculation
		float3 l = normalize( -inLightVector );
		diffuse = saturate( dot( n, l ) * fShadowScale );

		float3 halfVector = normalize( l + v );
		if ( specularPower > 0 )
			specular = fShadowScale * pow( saturate( dot( n, halfVector ) ), specularPower );
		else
			specular = 1;
	}

	float3 baseCol;
	float3 additiveCol;

	baseCol = globalDiffuse * diffuse + globalAmbient;
	additiveCol = globalSpecular * materialSpecularCol * specular;

	// Add a fresnel rim-lighting effect
	additiveCol += (0.5 + fShadowScale/2 ) * materialFresnelCol * globalFresnel * clamp( pow( (1-dot(v,n)), materialFresnelPower ), 0, 1 );

	float4 texCol = tex2D( texture0, inTexCoord0.xy );
    outCol = float4( saturate( baseCol * texCol.rgb + additiveCol ), texCol.a ) * inVertexColour;
}

// This function is used during the lighting pass - all we need here is depth
// information, there's nothing to process.  We still need to output a colour
// but that colour will not actually be rendered.
void
LightingLandscapeFragmentMain( out float4 outCol : COLOR )
{
	outCol = float4( 0,0,0,1 );
}

// This function is used during the lighting pass - we don't need to worry about
// any texture coords, vertex colours, or shadow calculations
void
LightingLandscapeVertexMain(	float4 inPos : POSITION,
								out float4 outPos : POSITION,
								uniform float4x4 model,
								uniform float4x4 view,
								uniform float4x4 projection
								)
{
	outPos = mul( mul( mul( inPos, model ), view ), projection );
}

// ************************************************************
// * Heightmap functions

void
HeightMapVertexMain(	float4 inPos : POSITION,
						float3 inNormal : NORMAL,
						float4 inTexCoord0 : TEXCOORD0,
						float4 inColour : COLOR,
			            
						out float4 outPos : POSITION,
						out float4 outTexCoord0 : TEXCOORD0,
						out float3 outEyeVector : TEXCOORD1,	// Eye-space direction from vertex to eye
						out float3 outNormal : TEXCOORD2,		// Eye-space per-vertex normals
						out float3 outLightVector : TEXCOORD3,	// Eye-space direction from vertex to light
						out float4 outColour : COLOR,
						out float4 outShadowPos : TEXCOORD4,	// The position of the vertex transformed into shadow map space

						uniform float4x4 model,
						uniform float4x4 view,
						uniform float4x4 projection,
						uniform float3 globalLightDir,
						uniform float4x4 texTransform,
						uniform float4x4 shadowMatrix )
{
	LandscapeVertexMain( inPos, inNormal, inTexCoord0, inColour,
						 outPos, outTexCoord0, outEyeVector, outNormal, outLightVector, outColour, outShadowPos,
						 model, view, projection, globalLightDir, texTransform, shadowMatrix );
}

void
HeightMapFragmentMain(	float4 inTexCoord0 : TEXCOORD0,
						float3 inPos : TEXCOORD1,
						float3 inNormal : TEXCOORD2,
						float3 inLightVector : TEXCOORD3,
						float4 inVertexColour : COLOR,
						float4 inShadowPos : TEXCOORD4,

						uniform sampler2D texture0,
						uniform sampler2D shadowMap,
						uniform float3 shadowSize,
						uniform float3 globalDiffuse,
						uniform float3 globalAmbient,
						uniform float3 globalSpecular,
						uniform float3 globalFresnel,

						out float4 outCol : COLOR0 )
{
	LandscapeFragmentMain( inTexCoord0, inPos, inNormal, inLightVector, float4(1,1,1,inVertexColour.a), inShadowPos,
						   texture0, shadowMap, shadowSize, globalDiffuse, globalAmbient, globalSpecular, globalFresnel,
						   //materialFresnelCol, materialSpecularCol, materialFresnelPower, specularPower,
						   outCol );
}

void
LightingHeightMapFragmentMain( out float4 outCol : COLOR )
{
	outCol = float4( 0,0,0,1 );
}

// This function is used during the lighting pass - we don't need to worry about
// any texture coords, vertex colours, or shadow calculations
void
LightingHeightMapVertexMain(	float4 inPos : POSITION,
								out float4 outPos : POSITION,
								uniform float4x4 model,
								uniform float4x4 view,
								uniform float4x4 projection
								)
{
	outPos = mul( mul( mul( inPos, model ), view ), projection );
}
